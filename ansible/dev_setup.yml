---
- hosts: localhost
  become: yes  # to run tasks as sudo
  tasks:
    - name: Install AWS CLI
      apt:
        name: awscli
        state: present

    - name: Install Conda
      block:
      - name: Download Miniconda
        become: no
        get_url:
          url: https://repo.anaconda.com/miniconda/Miniconda3-py311_23.5.2-0-Linux-x86_64.sh
          dest: /tmp/install-miniconda.sh
          mode: 0755

      - name: Run the installer
        become: yes
        shell: /bin/bash /tmp/install-miniconda.sh -b -p /home/{{ username }}/miniconda3
        args:
          creates: /home/{{ username }}/miniconda3/bin/conda
        vars:
          username: "{{ lookup('env', 'USER') }}"

      - name: Add conda to PATH
        become: yes
        shell: echo 'export PATH="/home/{{ username }}/miniconda3/bin:$PATH"' >> /home/{{ username }}/.bashrc
        args:
          creates: /home/{{ username }}/.bashrc
        vars:
          username: "{{ lookup('env', 'USER') }}"

    - name: Install fzf
      apt:
        name: fzf
        state: present

    - block:
      - name: Install the 'Development tools' package group
        ansible.builtin.yum:
          name: "@Development tools"
          state: present
  
      - name: Install prereq rpm packages
        ansible.builtin.yum:
          name: "{{ packages }}"
          state: present
        vars:
          packages:
            - curl
            - file
            - git
            - procps-ng

      - name: Install Fedora 30+ rpm package
        ansible.builtin.yum:
          name: libxcrypt-compat
          state: present
        when:
          - ansible_distribution == "Fedora"
          - ansible_distribution_major_version >= "30"
      when:
        - (ansible_pkg_mgr == "yum" or ansible_pkg_mgr == "dnf") and (ansible_os_family == "RedHat" or ansible_os_family == "Rocky")

    - block:  
      - name: Install prereq deb packages
        ansible.builtin.apt:
          update_cache: true
          name: "{{ packages }}"
          state: present
        vars:
          packages:
            - build-essential
            - curl
            - file
            - git
            - procps
      when:
        - ansible_pkg_mgr == "apt" and ansible_os_family == "Debian"

    - name: Clone Homebrew GitHub repo
      ansible.builtin.git:
        repo: https://github.com/Homebrew/brew.git
        dest: "/home/{{ homebrew_user }}/.linuxbrew/Homebrew"
        version: master
      become_user: "{{ lookup('env', 'USER') }}"
      become: yes

    - name: Create bin directory for brew
      ansible.builtin.file:
        path: "/home/{{ homebrew_user }}/.linuxbrew/bin"
        state: directory
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"

    - name: Create a symbolic link for brew
      ansible.builtin.file:
        src: "/home/{{ homebrew_user }}/.linuxbrew/Homebrew/bin/brew"
        dest: "/home/{{ homebrew_user }}/.linuxbrew/bin/brew"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        state: link

    - name: Clone Homebrew GitHub repo
      ansible.builtin.git:
        repo: "{{ homebrew_git_repo }}"
        dest: "/home/{{ homebrew_user }}/.linuxbrew/Homebrew"
        version: "{{ homebrew_release }}"
      become_user: "{{ lookup('env', 'USER') }}"
      become: yes

    - name: Create bin directory for brew
      ansible.builtin.file:
        path: "/home/{{ homebrew_user }}/.linuxbrew/bin"
        state: directory
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"

    - name: Create a symbolic link for brew
      ansible.builtin.file:
        src: "/home/{{ homebrew_user }}/.linuxbrew/Homebrew/bin/brew"
        dest: "/home/{{ homebrew_user }}/.linuxbrew/bin/brew"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        state: link

    - name: Install NVM
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash

    - name: Install tfenv
      community.general.homebrew:
        name: tfenv
        state: present

    - name: Install oh-my-bash
      shell: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)"
      args:
        warn: no  # This suppresses warnings about using shell instead of a module
      become: no

    - name: Install ipython
      apt:
        name: ipython3
        state: present
