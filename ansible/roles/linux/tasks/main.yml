---
- name: Install tools
  package:
    name:
      - kubectx
      - gh
      - jq
      - fzf
      - yq
      - snapd
    state: present
  when: is_linux == 'true'

- name: Install LazyGit (Linux)
  block:
    - name: Get latest LazyGit version
      uri:
        url: https://api.github.com/repos/jesseduffield/lazygit/releases/latest
        return_content: yes
      register: lazygit_latest_release

    - name: Set LazyGit version
      set_fact:
        lazygit_version: "{{ lazygit_latest_release.json.tag_name | regex_replace('^v', '') }}"

    - name: Set architecture-specific variables
      set_fact:
        lazygit_arch: >-
          {% if ansible_architecture == "x86_64" %}
          x86_64
          {% elif ansible_architecture.startswith("arm") %}
          arm64
          {% else %}
          unknown
          {% endif %}

    - name: Fail if architecture is unsupported
      fail:
        msg: "Unsupported architecture: {{ ansible_architecture }}"
      when: lazygit_arch == "unknown"

    - name: Download LazyGit
      get_url:
        url: "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_{{ lazygit_version }}_Linux_{{ lazygit_arch }}.tar.gz"
        dest: "/tmp/lazygit.tar.gz"
        mode: '0644'

    - name: Extract LazyGit
      unarchive:
        src: "/tmp/lazygit.tar.gz"
        dest: "/tmp"
        remote_src: yes
        extra_opts: [--strip-components=1]
        creates: "/tmp/lazygit"

    - name: Install LazyGit
      become: yes
      copy:
        src: "/tmp/lazygit"
        dest: "/usr/local/bin/lazygit"
        mode: '0755'
        remote_src: yes

    - name: Clean up temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/lazygit.tar.gz"
        - "/tmp/lazygit"

  when: is_linux == 'true'

- name: Install k9s with snap
  snap:
    name: k9s
    state: present
  when: is_linux == 'true'

- name: Install tfenv
  git:
    repo:
      - https://github.com/tfutils/tfenv.git
    dest: "{{ ansible_env.HOME }}/.tfenv"
  when: is_linux == 'true'

- name: Add tfenv to PATH
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: 'export PATH="$PATH:{{ ansible_env.HOME }}/.tfenv/bin"'
    state: present
    create: yes
  when: is_linux == 'true'

- name: Install AWS CLI
  pip:
    name: awscli
    state: present
  when: is_linux == 'true'

- name: Install Google Cloud SDK
  block:
    - name: Add Google Cloud SDK repository
      get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /usr/share/keyrings/cloud.google.gpg
    - name: Add Google Cloud SDK repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main"
        state: present
    - name: Install Google Cloud SDK
      apt:
        name: google-cloud-sdk
        state: present
        update_cache: yes
  when: is_linux == 'true'
